package pt.ipleiria.estg.dei.waypinpoint;

import static pt.ipleiria.estg.dei.waypinpoint.utils.Utilities.ID_CART;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.FragmentManager;

import java.util.ArrayList;

import Listeners.CartListener;
import Model.Cart;
import Model.CartDbHelper;
import Model.SingletonManager;

public class CartActivity extends AppCompatActivity implements CartListener {
    private FragmentManager fragmentManager;
    private int quantity;
    private int activityId;
    private String apiHost = null;
    private Cart cart;
    private EditText etQuantity;
    public static final String APIHOST = "APIHOST";
    private Button buttonAddCart;
    private CartListener listener;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_cart);

        int id = getIntent().getIntExtra(ID_CART, 0);

        cart = SingletonManager.getInstance(getApplicationContext()).getCart(id);
        etQuantity = findViewById(R.id.textviewQuantity);
        buttonAddCart = findViewById(R.id.buttonAddCart);
        alfredo();
        buttonAddCart.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (cart != null) {
                    etQuantity.setText(String.valueOf(cart.getQuantity()));
                    activityId = cart.getProduct_id();
                    SingletonManager.getInstance(getApplicationContext()).editCart(cart, getApplicationContext());
                } else {
                    cart = new Cart(
                            cart.getId(),
                            cart.getUser_id(),
                            cart.getProduct_id(),
                            cart.getQuantity(),
                            cart.getStatus(),
                            cart.getCalendar_id(),
                            cart.getTime(),
                            cart.getDate(),
                            cart.getPrice()
                    );
                    SingletonManager.getInstance(getApplicationContext()).addCartApi(cart, getApplicationContext());
                    Intent intent = new Intent(CartActivity.this, CartFragment.class);
                    startActivity(intent);
                }
            }
        });
        SingletonManager.getInstance(getApplicationContext()).setCartListener(this);
    }

    public void alfredo() {
//        String input = etQuantity.getText().toString().trim();
//        boolean isQuantityValid;
//        isQuantityValid = isQuantityValid(input);
//        if (isQuantityValid) {
//            int quantity = Integer.parseInt(input);
        try {
            CartDbHelper dbHelper = new CartDbHelper(this);
            Cart newCart = new Cart();
            newCart.setId(1); // Placeholder ID, usually auto-generated by the server
            newCart.setUser_id(1); // Replace with the actual user ID if available
            newCart.setProduct_id(1); // Replace with the actual product ID if available
            newCart.setQuantity(2);
            newCart.setStatus(0); // Example placeholder status
            newCart.setCalendar_id(1); // Placeholder calendar ID
            newCart.setTime("00:00"); // Example placeholder time
            newCart.setDate("2024-12-31"); // Example placeholder date
            newCart.setPrice(1);
            dbHelper.addCartDb(newCart);
            //SingletonManager.getInstance(getApplicationContext()).addCartApi(newCart, this);
//
            Toast.makeText(CartActivity.this, R.string.cart_added_successfully, Toast.LENGTH_SHORT).show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }



private boolean isQuantityValid(String input) {
    if (input.isEmpty()) {
        etQuantity.setError("Field cannot be empty");
        return false;
    }

    try {
        int quantity = Integer.parseInt(input);
        if (quantity <= 0) {
            etQuantity.setError("Quantity must be greater than 0");
            return false;
        }
    } catch (NumberFormatException e) {
        etQuantity.setError("Invalid quantity");
        return false;
    }
    return true;

}

@Override
public void onValidateOperation(int op) {

}

@Override
public void onErrorAdd(String errorMessage) {

}

@Override
public void onSuccess(ArrayList<Cart> carts) {

}

@Override
public void validateOperation(String s) {

}

@Override
public void onError(String s) {

}
}

